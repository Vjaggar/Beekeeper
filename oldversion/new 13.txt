#!/bin/bash

. /etc/profile

# -------------------------------------------------
# demiurge:jianggang
# time: F_ 20170205 \ L_ 20170306
# version:0.2.7
# encoded:UTF-8
# functions:
# P.S:
# -------------------------------------------------

#--红色高亮输出
_Echo()
{
echo -e "\033[37;31;1m  ${1}  \033[39;49;0m"
}

#--短信告警
_SMS_warn()
{
if [ -f ${shell_path}/info ];then
    local err_table="$1 $2"
    local job_name=`cat ${shell_path}/info|grep job_name|xargs|awk -F'=' '{print $2}'|awk '{print $1}'`
    local manager=`cat ${shell_path}/info|grep manager|xargs|awk -F'=' '{print $2}'|awk '{print $1}'`
    local msisdns=`cat ${shell_path}/info|grep msisdns|xargs|awk -F'=' '{print $2}'|awk '{print $1}'`
    local now_time=`date +"%Y/%m/%d %H:%M"`
    local message=`echo -e "任务名:${job_name}\n${err_table} 执行失败！\n任务路径:(${ip_addr})${job_path}\n负责人:${manager}\n告警时间:${now_time}"`

    #--向数据库短信告警表插入告警信息
    for msisdn in ${msisdns}
    do
    sqlplus -S ${database_concent} <<EOF
    INSERT INTO SEND_SMS VALUES (SEQ_SEND_SMS.NEXTVAL,'${msisdn}','${message}',SYSDATE);
    COMMIT;
    exit
EOF
    done

    if [ $? -ne 0 ];then
        _Echo "< ERROR! > Send sms filed!"
    fi
else
    _Echo "< ERROR! > No (${shell_path}/info) ,can't send sms!"
fi
if [ $? -ne 0 ];then
    _Echo "< ERROR! > An unknown error ,can't send sms!"
fi
}

#--检查是否表名、账期、本地网三个参数都传正确了
_Check_value()
{
local a=$1
local b=$2
local c=$3
local d=$4

array_a=($a)
array_b=($b)
array_c=($c)

if [ `echo ${#array_a[*]}` -gt 1 ] || [ `echo ${#array_b[*]}` -gt 1 ] || [ `echo ${#array_c[*]}` -gt 1 ];then
    _Echo "< ERROR! > Please input right values!"
    exit -1
fi
if [ ${#d} -ne 0 ];then
    _Echo "< ERROR! > Can't input greater than three values!"
    exit -1
fi
if [ ${#a} -eq 0 ];then
    _Echo "< ERROR! > Please input table_name!"
    exit -1
fi
a_l=`echo ${a}|awk '{print $1}'`
if [ ${#a} -ne ${#a_l} ];then
    _Echo "< ERROR! > Please input right table_name!"
    exit -1
fi

#--时间变量生成:

now_time=`date +"%Y%m%d%H%M%S"`

#--如果未传入账期
if [ ${#b} -eq 0 ];then
    #--当前时间戳
    CUR_TIME=`date +%s`

    #--今天日期(YYYYMMDD)
    today=`date +"%Y%m%d" -d @$CUR_TIME`
    #--昨天日期(YYYYMMDD)
    YESTERDAY_YYYYMMDD=`date +%Y%m%d -d @$((CUR_TIME - 86400))`
    yesterday=$YESTERDAY_YYYYMMDD
    #--前天日期(YYYYMMDD)
    DAY_BF_YES_YYYYMMDD=`date +%Y%m%d -d @$((CUR_TIME - 172800))`
    day_bf_yes=$DAY_BF_YES_YYYYMMDD

    #--现在的月份(YYYYMM)
    NOW_YEAR=`date +%Y -d @$CUR_TIME`
    NOW_MON=`date +%m -d @$CUR_TIME`
    now_month=${NOW_YEAR}${NOW_MON}
    #--现月第一天(YYYYMMDD)
    nm_fs_day=${now_month}01
    #--现月最后一天(YYYYMMDD)
    nm_ls_day=${now_month}$(cal ${now_month:4:2} ${now_month:0:4}|xargs|awk '{print $NF}')

    #--上个月月份(YYYYMM)
    FIST_TIME=`date -d"${NOW_YEAR}/${NOW_MON}/01 12:12:12" +%s`
    LS_MONTH_YYYYMM=`date +%Y%m -d @$((FIST_TIME - 86400))`
    ls_month=$LS_MONTH_YYYYMM
    #--上个月第一天(YYYYMMDD)
    lm_fs_day=${ls_month}01
    #--上个月最后一天(YYYYMMDD)
    lm_ls_day=${ls_month}$(cal ${ls_month:4:2} ${ls_month:0:4}|xargs|awk '{print $NF}')

    #--上上个月月份(YYYYMM)
    FIST_TIME2=`date -d"${ls_month:0:4}/${ls_month:4:2}/01 12:12:12" +%s`
    LS_2_MONTH_YYYYMM=`date +%Y%m -d @$((FIST_TIME2 - 86400))`
    ls_2_month=$LS_2_MONTH_YYYYMM
    #--上上个月第一天(YYYYMMDD)
    l2m_fs_day=${ls_2_month}01
    #--上上个月最后一天(YYYYMMDD)
    l2m_ls_day=${ls_2_month}$(cal ${ls_2_month:4:2} ${ls_2_month:0:4}|xargs|awk '{print $NF}')

fi
#--如果传入了账期
if [ ${#b} -ne 0 ];then
    #--判断传入的账期是否是6位或者8位的数字
    expr ${b} "+" 1 &> /dev/null
    if [ $? -ne 0 ] || [[ ${#b} -ne 6 && ${#b} -ne 8 ]];then
        _Echo "< ERROR! > Please input right date(YYYYMMDD or YYYYMM)!"
        exit -1
    fi
    #--判断传入的账期是否为日期
    ##--若传入的是月账期(YYYYMM)
    if [ ${#b} -eq 6 ];then
        date -d "${b}01 + 1 days" +"%Y%m%d" &> /dev/null
        if [ $? -ne 0 ] || [ ${b} -lt 199407 ];then
            _Echo "< ERROR! > Please input right date(YYYYMM)!"
            exit -1
        fi
        #--上个月月份(YYYYMM)
        ls_month=${b}
        #--上个月第一天(YYYYMMDD)
        lm_fs_day=${ls_month}01
        #--上个月最后一天(YYYYMMDD)
        lm_ls_day=${ls_month}$(cal ${ls_month:4:2} ${ls_month:0:4}|xargs|awk '{print $NF}')

        #--现在的月份(YYYYMM)
        LS_DAY_TIME=`date -d"${lm_ls_day:0:4}/${lm_ls_day:4:2}/${lm_ls_day:6:2} 12:12:12" +%s`
        now_month=`date +%Y%m -d @$((LS_DAY_TIME + 86400))`
        #--现月第一天(YYYYMMDD)
        nm_fs_day=${now_month}01
        #--现月最后一天(YYYYMMDD)
        nm_ls_day=${now_month}$(cal ${now_month:4:2} ${now_month:0:4}|xargs|awk '{print $NF}')

        #--上上个月月份(YYYYMM)
        FIST_TIME2=`date -d"${ls_month:0:4}/${ls_month:4:2}/01 12:12:12" +%s`
        LS_2_MONTH_YYYYMM=`date +%Y%m -d @$((FIST_TIME2 - 86400))`
        ls_2_month=$LS_2_MONTH_YYYYMM
        #--上上个月第一天(YYYYMMDD)
        l2m_fs_day=${ls_2_month}01
        #--上上个月最后一天(YYYYMMDD)
        l2m_ls_day=${ls_2_month}$(cal ${ls_2_month:4:2} ${ls_2_month:0:4}|xargs|awk '{print $NF}')

        #--当前时间戳
        CUR_TIME=`date +%s`

        #--今天日期(YYYYMMDD)
        today=`date +"%Y%m%d" -d @$CUR_TIME`
        #--昨天日期(YYYYMMDD)
        YESTERDAY_YYYYMMDD=`date +%Y%m%d -d @$((CUR_TIME - 86400))`
        yesterday=$YESTERDAY_YYYYMMDD
        #--前天日期(YYYYMMDD)
        DAY_BF_YES_YYYYMMDD=`date +%Y%m%d -d @$((CUR_TIME - 172800))`
        day_bf_yes=$DAY_BF_YES_YYYYMMDD

    else
        ##--若传入的是日账期(YYYYMMDD)
        date -d "${b} + 1 days" +"%Y%m%d" &> /dev/null
        if [ $? -ne 0 ] || [ ${b} -lt 19940703 ];then
            _Echo "< ERROR! > Please input right date(YYYYMMDD)!"
            exit -1
        fi

        #--昨天日期(YYYYMMDD)
        yesterday=${b}
        YS_CUR_TIME=`date -d"${yesterday:0:4}/${yesterday:4:2}/${yesterday:6:2} 12:12:12" +%s`
        #--今天日期(YYYYMMDD)
        TODAY_YYYYMMDD=`date +%Y%m%d -d @$((YS_CUR_TIME + 86400))`
        today=$TODAY_YYYYMMDD
        CUR_TIME=$((YS_CUR_TIME + 86400))
        #--前天日期(YYYYMMDD)
        DAY_BF_YES_YYYYMMDD=`date +%Y%m%d -d @$((YS_CUR_TIME - 86400))`
        day_bf_yes=$DAY_BF_YES_YYYYMMDD

        #--现在的月份(YYYYMM)
        NOW_YEAR=`date +%Y -d"${yesterday}"`
        NOW_MON=`date +%m -d"${yesterday}"`
        now_month=${NOW_YEAR}${NOW_MON}
        #--现月第一天(YYYYMMDD)
        nm_fs_day=${now_month}01
        #--现月最后一天(YYYYMMDD)
        nm_ls_day=${now_month}$(cal ${now_month:4:2} ${now_month:0:4}|xargs|awk '{print $NF}')

        #--上个月月份(YYYYMM)
        FIST_TIME=`date -d"${NOW_YEAR}/${NOW_MON}/01 12:12:12" +%s`
        LS_MONTH_YYYYMM=`date +%Y%m -d @$((FIST_TIME - 86400))`
        ls_month=$LS_MONTH_YYYYMM
        #--上个月第一天(YYYYMMDD)
        lm_fs_day=${ls_month}01
        #--上个月最后一天(YYYYMMDD)
        lm_ls_day=${ls_month}$(cal ${ls_month:4:2} ${ls_month:0:4}|xargs|awk '{print $NF}')

        #--上上个月月份(YYYYMM)
        FIST_TIME2=`date -d"${ls_month:0:4}/${ls_month:4:2}/01 12:12:12" +%s`
        LS_2_MONTH_YYYYMM=`date +%Y%m -d @$((FIST_TIME2 - 86400))`
        ls_2_month=$LS_2_MONTH_YYYYMM
        #--上上个月第一天(YYYYMMDD)
        l2m_fs_day=${ls_2_month}01
        #--上上个月最后一天(YYYYMMDD)
        l2m_ls_day=${ls_2_month}$(cal ${ls_2_month:4:2} ${ls_2_month:0:4}|xargs|awk '{print $NF}')

    fi
fi
if [ ${#c} -ne 0 ];then
        if [ ${#c} -ne 3 ] || [ `echo ${c}|egrep "701|790|791|792|793|794|795|796|797|798|799"|wc -l` -eq 0 ];then
                _Echo "< ERROR! > Please input right lan_id(701-799)!"
                exit -1
        fi
fi
}

#--检查任务目录下是否存在(表名.hql)文件
_Check_table()
{
local job_path=$1
local table_name=$2

dd=$(echo ${table_name}|grep '\.'|wc -l)

if [ ${dd} -eq 0 ];then
    hql_file=`find ${job_path} -name "${table_name}.hql"`

    hql_cnt=`echo -e "${hql_file}"|wc -l`

    if [ ${#hql_file} -eq 0 ];then
        _Echo "< ERROR! > No such file ( ${table_name}.hql ) in ${job_path}!"
        exit -1
    fi
    if [ ${hql_cnt} -gt 1 ];then
        _Echo "< ERROR! > Too much ${table_name}.hql ( ${hql_file} ) in ${job_path}!"
        exit -1
    fi
else
    hql_file=`find ${job_path} -name "${table_name}"`

    hql_cnt=`echo -e "${hql_file}"|wc -l`

    if [ ${#hql_file} -eq 0 ];then
        _Echo "< ERROR! > No such file ( ${table_name} ) in ${job_path}!"
        exit -1
    fi
    if [ ${hql_cnt} -gt 1 ];then
        _Echo "< ERROR! > Too much ${table_name} ( ${hql_file} ) in ${job_path}!"
        exit -1
    fi
fi

}

#--替换hql模版文件生成hql执行文件
_Sed_model()
{

R_hql="${job_path}/log/R/R_${table_name}_${poppy}_${lan_id}.hql"

cat ${hql_file} | sed -e "s/\${table_name}/${table_name}/g" \
                | sed -e "s/\${lan_id}/${lan_id}/g" \
                | sed -e "s/\${today}/${today}/g" \
                | sed -e "s/\${yesterday}/${yesterday}/g" \
                | sed -e "s/\${day_bf_yes}/${day_bf_yes}/g" \
                | sed -e "s/\${now_month}/${now_month}/g" \
                | sed -e "s/\${nm_fs_day}/${nm_fs_day}/g" \
                | sed -e "s/\${nm_ls_day}/${nm_ls_day}/g" \
                | sed -e "s/\${ls_month}/${ls_month}/g" \
                | sed -e "s/\${lm_fs_day}/${lm_fs_day}/g" \
                | sed -e "s/\${lm_ls_day}/${lm_ls_day}/g" \
                | sed -e "s/\${ls_2_month}/${ls_2_month}/g" \
                | sed -e "s/\${l2m_fs_day}/${l2m_fs_day}/g" \
                | sed -e "s/\${l2m_ls_day}/${l2m_ls_day}/g" \
                | sed -e "s/\${now_time}/${now_time}/g" \
                | sed -e "s/\${hivevar:table_name}/${table_name}/g" \
                | sed -e "s/\${hivevar:lan_id}/${lan_id}/g" \
                | sed -e "s/\${hivevar:today}/${today}/g" \
                | sed -e "s/\${hivevar:yesterday}/${yesterday}/g" \
                | sed -e "s/\${hivevar:day_bf_yes}/${day_bf_yes}/g" \
                | sed -e "s/\${hivevar:now_month}/${now_month}/g" \
                | sed -e "s/\${hivevar:nm_fs_day}/${nm_fs_day}/g" \
                | sed -e "s/\${hivevar:nm_ls_day}/${nm_ls_day}/g" \
                | sed -e "s/\${hivevar:ls_month}/${ls_month}/g" \
                | sed -e "s/\${hivevar:lm_fs_day}/${lm_fs_day}/g" \
                | sed -e "s/\${hivevar:lm_ls_day}/${lm_ls_day}/g" \
                | sed -e "s/\${hivevar:ls_2_month}/${ls_2_month}/g" \
                | sed -e "s/\${hivevar:l2m_fs_day}/${l2m_fs_day}/g" \
                | sed -e "s/\${hivevar:l2m_ls_day}/${l2m_ls_day}/g" \
                | sed -e "s/\${hivevar:now_time}/${now_time}/g" > ${R_hql}

echo '' >> ${R_hql}

}

#--检测hql执行文件是否正常
_Check_R_hql()
{

local err_flag=$(grep '\${' ${R_hql}|wc -l)

if [ ${err_flag} -ne 0 ];then
    err_message=$(grep -n -e '\${' -e '}' ${R_hql} --color=always)
    echo -e "\033[37;31;1mError: Can't write the unknown HIVE's variates! ERROR FILE: ${hql_file} .  ERROR LINE:\033[39;49;0m( ${err_message} )\033[37;31;1m. The R_hql:
 ${R_hql}\033[39;49;0m"
    echo 2 > ${job_path}/log/flag/${table_name}_${poppy}_${lan_id}.flag
    exit -1
fi

}

#--默认最多执行3次，执行3次还是失败则发出告警并退出，每次执行间隔时间为3分21秒
_Super_sh()
{
for((i=0;i<=60;i++))
do
    if [ ${i} -eq 3 ];then
        _SMS_warn ${table_name} ${lan_id}
        exit -1
        else
        #--替换hql模版文件生成hql执行文件
        _Sed_model

        #--检测hql执行文件是否正常
        _Check_R_hql

        llog_flag=$(cat ${hql_file}|grep -e "\${hivevar:lan_id}" -e "\${lan_id}"|grep -v "SET" -i -w|grep -e "\--" -v|wc -l)
        if [[ ${#lan_id} -eq 0 && ${llog_flag} -ne 0 ]];then
            _Echo "< ERROR! > Value (\${hivevar:lan_id}) or (\${lan_id}) in ${hql_file} .Please input lan_id!"
            echo 2 > ${job_path}/log/flag/${table_name}_${poppy}_${lan_id}.flag
            exit -1
        elif [[ ${#lan_id} -ne 0 && ${llog_flag} -eq 0 ]];then
            _Echo "< ERROR! > No value (\${hivevar:lan_id}) or (\${lan_id}) in ${hql_file} .Can't input lan_id!"
            echo 2 > ${job_path}/log/flag/${table_name}_${poppy}_${lan_id}.flag
            exit -1
        elif [ ${#lan_id} -ne 0 ];then
            lan_flag="_${lan_id}"
        else
            :
        fi
        if [ ${#poppy} -ne 0 ];then
            rose="_${poppy}"
        fi
        job_log=${job_path}/log/${table_name}${rose}${lan_flag}.log
        echo_message="${table_name} ${poppy} ${lan_id}"

        local begin_time=`date +"%Y-%m-%d %H:%M:%S"`
        echo -e "\n[- ^binggo^ ${begin_time} -]\n~.table_name: ${table_name}\n~.data_date: ${poppy}\n~.lan_id: ${lan_id}\n" > ${job_log}
        #--程序内核:BeeLine
        /hadoop/hive-0.13.1-cdh5.3.3/bin/beeline -u "jdbc:hive2://134.225.72.206:10001" -n hadoop -p 1qaz#EDC --color=true --silent=false --verbose=true --hiveconf mapr
ed.job.queue.name=hadoop --hiveconf mapred.job.name="${table_name}${rose}${lan_flag}" -f ${R_hql} >> ${job_log} 2>&1
        local sh_state=$?
        echo ${sh_state} > ${job_path}/log/flag/${table_name}_${poppy}_${lan_id}.flag
        local end_time=`date +"%Y-%m-%d %H:%M:%S"`

        echo -e "\n------------------------------------------------------------------\n|  .begin : ${begin_time}  --  .end : ${end_time}  |\n---------------------------
---------------------------------------\n" >> ${job_log}
        if [ ${sh_state} -ne 0 ];then
            local now_time=`date +"%H%M"`
            local err_log=`echo ${job_log}|sed -e "s/\.log/_${now_time}_err_${i}.log/g"`
            echo ':- '
            ip_addr=`ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2}'|tr -d "addr:"`
            echo -e "Job:< ${echo_message}> Run${i}th. ERROR!!! begin:${begin_time} end:${end_time}"
            echo -e "(${ip_addr})err_log: ${err_log}"
            echo -e "(${ip_addr})R_hql: ${R_hql}"
            echo -e "(${ip_addr}).hql: ${hql_file}\n-"
            mv ${job_log} ${err_log}
            cat ${err_log}|grep -i "ERROR"
            echo ':- '
            if [ ${i} -ne 2 ];then
                #--重跑等待间隔时间
                sleep 201s
            fi
        else
            rm -f ${job_path}/log/flag/${table_name}_${poppy}_${lan_id}.flag
            echo "< ${echo_message} > OK. begin:${begin_time} end:${end_time}"
            break
        fi
    fi
done
}



#--短信告警所需数据库链接(数据库密码更换时需更新)
database_concent='tydic_dm/tobethe1_it648@khqjdb11_srv'

#--表名
table_name=$1
#--账期
poppy=$2
#--本地网
lan_id=$3
#--错误参数标识
err_value=$4
#--此任务的绝对路径
shell_path=$(cd "$(dirname "$0")";pwd)
job_path=$(cd ${shell_path}/..;pwd)


#--检查是否表名、账期、本地网三个参数都传正确了
_Check_value "${table_name}" "${poppy}" "${lan_id}" "${err_value}"


#--检查任务目录下是否存在(表名.hql)文件
_Check_table "${job_path}" "${table_name}"


#--创建日志存放路径和执行文件路径
if [ ! -d ${job_path}/log/flag/ ];then
        mkdir -p ${job_path}/log/flag/
fi
if [ ! -d ${job_path}/log/R/ ];then
        mkdir -p ${job_path}/log/R/
fi


#--删除5天以前的历史日志,5天前flag,99天以前错误日志,5天前的执行hql文件
find ${job_path}/log/ -mtime +5 -type f |grep "\.log"|grep -v "err"|xargs rm -f &> /dev/null
find ${job_path}/log/flag/ -mtime +5 -type f |xargs rm -f &> /dev/null
find ${job_path}/log/ -mtime +99 -type f |grep "\.log"|xargs rm -f &> /dev/null
find ${job_path}/log/R/ -mtime +5 -type f |xargs rm -f &> /dev/null

#--超级执行
_Super_sh